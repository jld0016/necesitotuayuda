// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using NYHApp.Data;
using System;

namespace NYHApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180507082134_Initial3")]
    partial class Initial3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NYHApp.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("IdCountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NYHApp.Models.Enterprise", b =>
                {
                    b.Property<long>("IdEnterprise")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("CIF")
                        .IsRequired();

                    b.Property<string>("City");

                    b.Property<string>("CodeEnterprise")
                        .IsRequired();

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Door");

                    b.Property<string>("FiscalName");

                    b.Property<string>("Floor");

                    b.Property<int>("IdCountry");

                    b.Property<int>("IdTypeRoad");

                    b.Property<string>("IdUserAdministrator");

                    b.Property<string>("IdUserLastModified");

                    b.Property<string>("Latitute");

                    b.Property<string>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Number");

                    b.Property<string>("Phone1")
                        .IsRequired();

                    b.Property<string>("Phone2");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("UnstructuredAddress");

                    b.HasKey("IdEnterprise");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdTypeRoad");

                    b.HasIndex("IdUserAdministrator");

                    b.HasIndex("IdUserLastModified");

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("NYHApp.Models.Help", b =>
                {
                    b.Property<long>("IdHelp")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City");

                    b.Property<bool>("Close");

                    b.Property<DateTime?>("CloseDate");

                    b.Property<string>("CodeHelp")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Door");

                    b.Property<string>("Floor");

                    b.Property<int>("IdCountry");

                    b.Property<int>("IdTypeRoad");

                    b.Property<string>("IdUser")
                        .IsRequired();

                    b.Property<string>("IdUserLastModified");

                    b.Property<bool>("IsExtension");

                    b.Property<bool>("IsMansonry");

                    b.Property<bool>("IsNewWork");

                    b.Property<bool>("IsPainting");

                    b.Property<bool>("IsReform");

                    b.Property<string>("Latitute");

                    b.Property<string>("Longitude");

                    b.Property<string>("Number");

                    b.Property<string>("Phone1")
                        .IsRequired();

                    b.Property<string>("Phone2");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UnstructuredAddress");

                    b.HasKey("IdHelp");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdTypeRoad");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserLastModified");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("NYHApp.Models.LineProposal", b =>
                {
                    b.Property<long>("IdLineProposal")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Description");

                    b.Property<long>("IdProposal");

                    b.Property<string>("IdUserLastModified");

                    b.Property<decimal>("Price");

                    b.Property<string>("UserLastModifiedId");

                    b.HasKey("IdLineProposal");

                    b.HasIndex("IdProposal");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("LinesProposals");
                });

            modelBuilder.Entity("NYHApp.Models.Photo", b =>
                {
                    b.Property<long>("IdPhoto")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateLastModified");

                    b.Property<DateTime>("DateUpload");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<long>("IdHelp");

                    b.Property<string>("IdUserLastModified");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("IdPhoto");

                    b.HasIndex("IdHelp");

                    b.HasIndex("IdUserLastModified");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("NYHApp.Models.Proposal", b =>
                {
                    b.Property<long>("IdProposal")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Description");

                    b.Property<long>("IdEnterprise");

                    b.Property<long>("IdHelp");

                    b.Property<string>("IdUserLastModified");

                    b.Property<decimal>("Total");

                    b.HasKey("IdProposal");

                    b.HasIndex("IdEnterprise");

                    b.HasIndex("IdHelp");

                    b.HasIndex("IdUserLastModified");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("NYHApp.Models.TypeRoad", b =>
                {
                    b.Property<int>("IdTypeRoad")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("IdTypeRoad");

                    b.ToTable("TypesRoads");
                });

            modelBuilder.Entity("NYHApp.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Door");

                    b.Property<string>("Floor");

                    b.Property<int>("IdCountry");

                    b.Property<long?>("IdEnterprise");

                    b.Property<int>("IdTypeRoad");

                    b.Property<string>("NIF")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Number");

                    b.Property<string>("Phone1")
                        .IsRequired();

                    b.Property<string>("Phone2");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Surname1")
                        .IsRequired();

                    b.Property<string>("Surname2");

                    b.Property<string>("UnstructuredAddress");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdEnterprise");

                    b.HasIndex("IdTypeRoad");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NYHApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NYHApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NYHApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NYHApp.Models.Enterprise", b =>
                {
                    b.HasOne("NYHApp.Models.Country", "Country")
                        .WithMany("Enterprises")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.TypeRoad", "TypeRoad")
                        .WithMany()
                        .HasForeignKey("IdTypeRoad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserAdministrator")
                        .WithMany()
                        .HasForeignKey("IdUserAdministrator");

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("IdUserLastModified");
                });

            modelBuilder.Entity("NYHApp.Models.Help", b =>
                {
                    b.HasOne("NYHApp.Models.Country", "Country")
                        .WithMany("Helps")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.TypeRoad", "TypeRoad")
                        .WithMany()
                        .HasForeignKey("IdTypeRoad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserHelp")
                        .WithMany("Helps")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("IdUserLastModified");
                });

            modelBuilder.Entity("NYHApp.Models.LineProposal", b =>
                {
                    b.HasOne("NYHApp.Models.Proposal", "Proposal")
                        .WithMany("LinesProposals")
                        .HasForeignKey("IdProposal")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");
                });

            modelBuilder.Entity("NYHApp.Models.Photo", b =>
                {
                    b.HasOne("NYHApp.Models.Help", "Help")
                        .WithMany("Photos")
                        .HasForeignKey("IdHelp")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("IdUserLastModified");
                });

            modelBuilder.Entity("NYHApp.Models.Proposal", b =>
                {
                    b.HasOne("NYHApp.Models.Enterprise", "Enterprise")
                        .WithMany("Proposals")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NYHApp.Models.Help", "Help")
                        .WithMany("Proposals")
                        .HasForeignKey("IdHelp")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NYHApp.Models.ApplicationUser", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("IdUserLastModified");
                });

            modelBuilder.Entity("NYHApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("NYHApp.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NYHApp.Models.Enterprise", "Enterprise")
                        .WithMany("Users")
                        .HasForeignKey("IdEnterprise");

                    b.HasOne("NYHApp.Models.TypeRoad", "TypeRoad")
                        .WithMany()
                        .HasForeignKey("IdTypeRoad")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
